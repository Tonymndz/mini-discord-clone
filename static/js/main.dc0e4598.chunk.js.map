{"version":3,"sources":["features/appSlice.js","SidebarChannel.jsx","features/userSlice.js","firebase.js","Sidebar.jsx","ChatHeader.jsx","Message.jsx","EmojiPopUp.js","GIFPopUp.js","Chat.jsx","Login.jsx","App.jsx","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","isSelectedChannel","selectChannel","dispatch","useDispatch","_jsx","className","onClick","onChannelClick","children","_jsxs","userSlice","user","login","logout","selectUser","REACT_APP_apiKey","REACT_APP_authDomain","REACT_APP_projectId","REACT_APP_storageBucket","REACT_APP_messagingSenderId","REACT_APP_appId","REACT_APP_measurementId","process","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firebase","initializeApp","firestore","auth","GoogleAuthProvider","Sidebar","useSelector","channels","setChannels","useState","selectedChannel","setSelectedChannel","useEffect","collection","onSnapshot","collectionSnapshot","firstChannel","docs","data","map","doc","channel","ExpandMoreIcon","AddIcon","addChannel","prompt","add","idx","Avatar","src","photo","displayName","uid","substring","MicIcon","HeadsetIcon","SettingsIcon","ChatHeader","NotificationsIcon","EditLocationRoundedIcon","PeopleAltRoundedIcon","placeholder","SearchRoundedIcon","SendRoundedIcon","HelpRoundedIcon","Message","timestamp","message","messageIsURL","isUrl","Date","toDate","toUTCString","split","slice","join","alt","EmojiPopUp","input","addEmojiToInput","popupState","usePopupState","variant","popupId","EmojiEmotionsIcon","fontSize","bindTrigger","Menu","bindMenu","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","Picker","style","background","borderColor","set","onSelect","evt","emoji","native","close","theme","GIFPopUp","sendEmoji","CardGiftcardIcon","ReactGiphySearchbox","item","onGIFSelect","EmojiLink","images","original","url","masonryConfig","columns","imageWidth","gutter","mq","Chat","setInput","messages","setMessages","messagesEndRef","useRef","orderBy","snapshot","scrollToBottom","current","scrollIntoView","behavior","reverse","ref","AddCircleIcon","disabled","value","onChange","e","target","type","preventDefault","FieldValue","serverTimestamp","emojiLink","EmojiToAdd","Login","App","randomImage","axios","get","request","responseURL","console","log","signInAnonymously","then","guest","email","faker","internet","firstName","catch","error","alert","height","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","React","StrictMode","Provider","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dc0e4598.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: { channelId: null, channelName: null },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from 'react'\r\nimport { setChannelInfo } from './features/appSlice';\r\nimport { useDispatch } from 'react-redux'\r\nimport './SidebarChannel.css'\r\n\r\nfunction SidebarChannel({ id, channelName, isSelectedChannel, selectChannel }) {\r\n  const dispatch = useDispatch();\r\n  const onChannelClick = () => {\r\n    selectChannel()\r\n    dispatch(setChannelInfo({ channelId: id, channelName }))\r\n  }\r\n\r\n  return (\r\n    <div className={`SidebarChannel${isSelectedChannel ? '-active' : '-unactive'}`} onClick={onChannelClick}>\r\n      <h4><span className=\"SidebarChannel_hash\">#</span>{channelName}</h4>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SidebarChannel\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: { user: null },\r\n  reducers: {\r\n    login: (state, action) => { state.user = action.payload; },\r\n    logout: (state) => { state.user = null; }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from 'firebase';\r\nconst { REACT_APP_apiKey, REACT_APP_authDomain, REACT_APP_projectId, REACT_APP_storageBucket, REACT_APP_messagingSenderId, REACT_APP_appId, REACT_APP_measurementId } = process.env\r\n\r\nconst firebaseConfig = {\r\n  apiKey: REACT_APP_apiKey,\r\n  authDomain: REACT_APP_authDomain,\r\n  projectId: REACT_APP_projectId,\r\n  storageBucket: REACT_APP_storageBucket,\r\n  messagingSenderId: REACT_APP_messagingSenderId,\r\n  appId: REACT_APP_appId,\r\n  measurementId: REACT_APP_measurementId\r\n}; \r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import React, { useState, useEffect } from 'react'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n// import SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\n// import InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\n// import CallIcon from '@material-ui/icons/Call';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport SidebarChannel from './SidebarChannel';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport './Sidebar.css'\r\nimport db, { auth } from './firebase';\r\nimport { setChannelInfo } from \"./features/appSlice\";\r\n\r\nfunction Sidebar() {\r\n  const user = useSelector(selectUser);\r\n  const [channels, setChannels] = useState([]); \r\n  const dispatch = useDispatch()\r\n  const [selectedChannel, setSelectedChannel] = useState(0)\r\n\r\n  useEffect(() => {\r\n    db.collection('channels') // Collection located at Cloud Firestore, Collection is like the namespace\r\n      .onSnapshot(collectionSnapshot => { // onSnapshot is a listener that once there is a chance inside the namespace this fn will run\r\n        const firstChannel = collectionSnapshot.docs[0]\r\n        if (firstChannel) dispatch(setChannelInfo({channelId: firstChannel.id, channelName: firstChannel.data().channelName}))\r\n        setChannels(collectionSnapshot.docs.map(doc => ({ id: doc.id, channel: doc.data() })))\r\n      })\r\n  }, [dispatch])\r\n\r\n  const addChannel = () => {\r\n    const channelName = prompt('Enter a new channel name');\r\n    if (channelName) {\r\n      db.collection('channels').add({ channelName: channelName })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Sidebar\">\r\n      <div className=\"Sidebar_top\">\r\n        <h3>General</h3>\r\n        <ExpandMoreIcon />\r\n      </div>\r\n\r\n      <div className=\"Sidebar_channels\">\r\n        <div className=\"Sidebar_channelsHeader\">\r\n          <div className=\"Sidebar_header\">\r\n            <ExpandMoreIcon />\r\n            <h4>Text Channels</h4>\r\n          </div>\r\n\r\n          <AddIcon onClick={addChannel}className=\"Sidebar_addChannel\" />\r\n        </div>\r\n        <div className=\"Sidebar_channelsList\">\r\n          {channels.map(({ id, channel }, idx) => <SidebarChannel \r\n            key={id} \r\n            id={id} \r\n            channelName={channel.channelName}\r\n            isSelectedChannel={idx === selectedChannel}\r\n            selectChannel={() => setSelectedChannel(idx)} \r\n          />)}\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"Sidebar_voice\">\r\n        <SignalCellularAltIcon \r\n          className=\"Sidebar_voiceIcon\"\r\n          fontSize=\"large\"\r\n        />\r\n        <div className=\"Sidebar_voiceInfo\">\r\n          <h3>Voice Connected</h3>\r\n          <p>Stream</p>\r\n        </div>\r\n\r\n        <div className=\"Sidebar_voiceIcons\">\r\n          <InfoOutlinedIcon />\r\n          <CallIcon />\r\n        </div>\r\n      </div> */}\r\n      <div className=\"Sidebar_profile\">\r\n        <div className=\"Sidebar_profileInfo\">\r\n          <Avatar /*onClick={() => auth.signOut()}*/ src={user.photo} />\r\n          <div className='Sidebar_profileDescription'>\r\n            <h3>{user.displayName}</h3>\r\n            <h3 id='profile_id'>#{user.uid.substring(0, 5)}</h3>\r\n          </div>\r\n        </div>\r\n        <div className=\"Sidebar_profileIcons\">\r\n          <MicIcon />\r\n          <HeadsetIcon />\r\n          <SettingsIcon />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMoreIcon';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationRoundedIcon from '@material-ui/icons/EditLocationRounded';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\nimport './ChatHeader.css'\r\n\r\nfunction ChatHeader({ channelName }) {\r\n  return (\r\n    <div className=\"ChatHeader\">\r\n      <div className=\"ChatHeader_left\">\r\n        <h3>\r\n          <span className=\"ChatHeader_hash\">#</span>\r\n          {channelName}\r\n        </h3>\r\n      </div>\r\n      <div className=\"ChatHeader_right\">\r\n        <NotificationsIcon />\r\n        <EditLocationRoundedIcon />\r\n        <PeopleAltRoundedIcon />\r\n\r\n      <div className=\"ChatHeader_search\">\r\n        <input placeholder=\"Search\" />\r\n        <SearchRoundedIcon />\r\n      </div>\r\n\r\n      <SendRoundedIcon />\r\n      <HelpRoundedIcon />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatHeader\r\n","import { Avatar } from '@material-ui/core'\r\nimport isUrl from 'is-url'\r\nimport React from 'react'\r\nimport './Message.css'\r\n\r\nfunction Message({ timestamp, user, message }) {\r\n  const messageIsURL = isUrl(message);\r\n\r\n  return (\r\n    <div className=\"Message\">\r\n      <Avatar src={user.photo}/>\r\n      <div className=\"Message_info\">\r\n        <h4>{user.displayName}</h4>\r\n        <span className=\"Message_timestamp\">\r\n          {new Date(timestamp?.toDate()).toUTCString().split(\" \").slice(0, 4).join(\" \")}\r\n        </span>\r\n        <p>\r\n          {messageIsURL ? <img src={message} alt={message} /> : message}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message\r\n","import {\r\n  usePopupState,\r\n  bindTrigger,\r\n  bindMenu,\r\n} from 'material-ui-popup-state/hooks'\r\nimport { Menu } from \"@material-ui/core\";\r\nimport { Picker } from \"emoji-mart\";\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\nimport './EmojiPopUp.css'\r\n\r\nconst EmojiPopUp = ({ input, addEmojiToInput }) => {\r\n  const popupState = usePopupState({ variant: 'popover', popupId: 'demoMenu' })\r\n\r\n  const onEmojiSelect = (evt) => {\r\n    const emoji = evt.native;\r\n    addEmojiToInput(emoji)\r\n    popupState.close(evt)\r\n  }\r\n\r\n  return (\r\n    <div className='EmojiPopUp'>\r\n      <EmojiEmotionsIcon fontSize=\"large\"  {...bindTrigger(popupState)} />\r\n      <Menu\r\n        {...bindMenu(popupState)}\r\n        getContentAnchorEl={null}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right', }}\r\n        transformOrigin={{ vertical: 'bottom', horizontal: 'right', }}\r\n      >\r\n        <Picker style={{ background: '#2f3136', borderColor: \"#202225\" }}\r\n        set='twitter' \r\n        onSelect={onEmojiSelect}\r\n        theme=\"dark\"\r\n        />\r\n      </Menu>\r\n    </div>\r\n  )\r\n} \r\n\r\nexport default EmojiPopUp;","import {\r\n  usePopupState,\r\n  bindTrigger,\r\n  bindMenu,\r\n} from 'material-ui-popup-state/hooks'\r\nimport { Menu } from \"@material-ui/core\";\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\r\nimport ReactGiphySearchbox from \"react-giphy-searchbox\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\nimport './GIFPopUp.css'\r\n\r\nconst GIFPopUp = ({ sendEmoji }) => {\r\n  const popupState = usePopupState({ variant: 'popover', popupId: 'demoMenu' })\r\n  const onGIFSelect = (EmojiLink) => {\r\n    sendEmoji(EmojiLink);\r\n    popupState.close()\r\n  }\r\n\r\n  return (\r\n    <div className='GIFPopUp'>\r\n      <CardGiftcardIcon fontSize=\"large\"  {...bindTrigger(popupState)} />\r\n      <Menu\r\n        {...bindMenu(popupState)}\r\n        getContentAnchorEl={null}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right', }}\r\n        transformOrigin={{ vertical: 'bottom', horizontal: 'right', }}\r\n      >\r\n      <div className=\"searchboxWrapper\">\r\n        <ReactGiphySearchbox\r\n          apiKey=\"9Ixlv3DWC1biJRI57RanyL7RTbfzz0o7\"\r\n          onSelect={(item) => onGIFSelect(item.images.original.url)}\r\n          masonryConfig={[\r\n            { columns: 2, imageWidth: 110, gutter: 5 },\r\n            { mq: \"700px\", columns: 3, imageWidth: 120, gutter: 5 }\r\n          ]}\r\n        />\r\n      </div>\r\n      </Menu>\r\n    </div>\r\n  )\r\n} \r\n\r\nexport default GIFPopUp;","import React, { useState, useRef, useEffect } from \"react\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport \"./Chat.css\";\r\nimport Message from \"./Message\";\r\nimport { selectChannelId, selectChannelName } from \"./features/appSlice\";\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport db from \"./firebase\";\r\nimport firebase from 'firebase';\r\nimport EmojiPopUp from \"./EmojiPopUp\";\r\nimport GIFPopUp from \"./GIFPopUp\";\r\n\r\nfunction Chat() {\r\n  const user = useSelector(selectUser);\r\n  const channelId = useSelector(selectChannelId);\r\n  const channelName = useSelector(selectChannelName);\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const messagesEndRef = useRef(null);\r\n  \r\n\r\n  useEffect(() => {\r\n    if (channelId) {\r\n      db.collection('channels')\r\n        .doc(channelId).collection('messages')\r\n        .orderBy('timestamp', \"desc\")\r\n        .onSnapshot(snapshot => setMessages(snapshot.docs.map(doc => doc.data())))\r\n    }\r\n  }, [channelId])\r\n\r\n  const sendMessage = (evt) => {\r\n    if (evt) evt.preventDefault();\r\n    db.collection('channels').doc(channelId).collection('messages').add({ timestamp: firebase.firestore.FieldValue.serverTimestamp(), message: input, user})\r\n    setInput(\"\");\r\n  }\r\n\r\n  const sendEmoji = (emojiLink) => {\r\n    db.collection('channels').doc(channelId).collection('messages').add({ timestamp: firebase.firestore.FieldValue.serverTimestamp(), message: emojiLink, user})\r\n    setInput(\"\");\r\n  }\r\n\r\n  const scrollToBottom = () => messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n  useEffect(scrollToBottom, [messages]);\r\n\r\n  return <div className=\"Chat\">\r\n    <ChatHeader channelName={channelName} />\r\n\r\n    <div className=\"Chat_messages\">\r\n      {messages.slice().reverse().map(({timestamp, message, user}) => <Message \r\n        key={timestamp + message + user}\r\n        user={user}\r\n        message={message}\r\n        timestamp={timestamp}\r\n      />)}\r\n      <div ref={messagesEndRef} />\r\n    </div>\r\n\r\n    <div className=\"Chat_input\">\r\n      <AddCircleIcon fontSize=\"large\" />\r\n      <form>\r\n        <input placeholder={`Message #${channelName}`} disabled={!channelId} value={input} onChange={(e) => setInput(e.target.value)} />\r\n        <button className=\"Chat_inputButton\" type=\"submit\" onClick={sendMessage} >\r\n          Send Message\r\n        </button>\r\n      </form>\r\n\r\n      <div className=\"Chat_inputIcons\">\r\n        <GIFPopUp sendEmoji={sendEmoji} />\r\n        <EmojiPopUp addEmojiToInput={(EmojiToAdd) => setInput(input + EmojiToAdd)} />\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n}\r\n\r\nexport default Chat;\r\n","import { Button } from '@material-ui/core'\r\nimport { auth, provider } from './firebase';\r\nimport asd from './discord_logo.png'\r\n// import zxc from './discord-clone.png'\r\nimport React from 'react'\r\nimport \"./Login.css\"\r\n\r\nfunction Login() {\r\n  const signIn = () => {\r\n    auth.signInWithPopup(provider).catch(err => alert(err.message))\r\n  }\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <div className=\"Login_logo\">\r\n        <img src={asd} width=\"600\" alt=\"Logo\" />\r\n      </div>\r\n\r\n      <Button onClick={signIn}>Sign In</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Sidebar from './Sidebar';\r\nimport Chat from './Chat';\r\nimport './App.css';\r\nimport { selectUser } from './features/userSlice';\r\nimport Login from './Login';\r\nimport { auth } from './firebase';\r\nimport { login, logout } from './features/userSlice';\r\nimport faker from 'faker';\r\nimport axios from 'axios';\r\n\r\nconst IMAGE_API_URL = \"https://unsplash.it/900/900?random\"\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser)\r\n\r\n  // useEffect(() => {\r\n  //   auth.onAuthStateChanged((authUser) => {\r\n  //     if (authUser) {\r\n  //       dispatch(login({ \r\n  //         uid: authUser.uid, \r\n  //         photo: authUser.photoURL, \r\n  //         email: authUser.email,\r\n  //         displayName: authUser.displayName\r\n  //       }))\r\n  //     } else {\r\n  //       dispatch(logout())\r\n  //     }\r\n  //   })\r\n  // }, [dispatch])\r\n  \r\n  // if (!user)\r\n  //   return <Login />\r\n  \r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const randomImage = (await axios.get(IMAGE_API_URL)).request.responseURL\r\n      console.log(randomImage)\r\n      auth.signInAnonymously().then(guest => { \r\n        dispatch(login({\r\n          uid: guest.user.uid,\r\n          photo: randomImage,\r\n          email: faker.internet.email(),\r\n          displayName: faker.name.firstName() \r\n        }))\r\n      }).catch(error => alert(error.message))\r\n    })()\r\n  }, [dispatch])\r\n\r\n  if (!user)\r\n    return <div style={{ background: '#36393f', height: '100vh'}} />\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Sidebar />\r\n      <Chat />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
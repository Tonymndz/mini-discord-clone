{"version":3,"sources":["features/appSlice.js","SidebarChannel.jsx","features/userSlice.js","firebase.js","Sidebar.jsx","ChatHeader.jsx","Message.jsx","EmojiPopUp.js","GIFPopUp.js","Chat.jsx","Login.jsx","App.jsx","app/store.js","serviceWorker.js","index.js"],"names":["appSlice","createSlice","name","initialState","channelId","channelName","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","SidebarChannel","id","isSelectedChannel","selectChannel","dispatch","useDispatch","className","onClick","userSlice","user","login","logout","selectUser","process","firebaseConfig","apiKey","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","measurementId","REACT_APP_measurementId","db","firebase","initializeApp","firestore","auth","GoogleAuthProvider","Sidebar","useSelector","useState","channels","setChannels","selectedChannel","setSelectedChannel","useEffect","collection","onSnapshot","collectionSnapshot","firstChannel","docs","data","map","doc","channel","prompt","add","idx","Avatar","src","photo","displayName","uid","substring","ChatHeader","placeholder","Message","timestamp","message","messageIsURL","isUrl","Date","toDate","toUTCString","split","slice","join","alt","EmojiPopUp","input","addEmojiToInput","popupState","usePopupState","variant","popupId","fontSize","bindTrigger","Menu","bindMenu","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","style","background","borderColor","set","onSelect","evt","emoji","native","close","theme","GIFPopUp","sendEmoji","item","EmojiLink","images","original","url","masonryConfig","columns","imageWidth","gutter","mq","Chat","setInput","messages","setMessages","messagesEndRef","useRef","orderBy","snapshot","current","scrollIntoView","behavior","reverse","ref","disabled","value","onChange","e","target","type","preventDefault","FieldValue","serverTimestamp","emojiLink","EmojiToAdd","Login","App","a","axios","get","randomImage","request","responseURL","console","log","signInAnonymously","then","guest","email","faker","internet","firstName","catch","error","alert","height","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5121e7f5.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: { channelId: null, channelName: null },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import React from 'react'\r\nimport { setChannelInfo } from './features/appSlice';\r\nimport { useDispatch } from 'react-redux'\r\nimport './SidebarChannel.css'\r\n\r\nfunction SidebarChannel({ id, channelName, isSelectedChannel, selectChannel }) {\r\n  const dispatch = useDispatch();\r\n  const onChannelClick = () => {\r\n    selectChannel()\r\n    dispatch(setChannelInfo({ channelId: id, channelName }))\r\n  }\r\n\r\n  return (\r\n    <div className={`SidebarChannel${isSelectedChannel ? '-active' : '-unactive'}`} onClick={onChannelClick}>\r\n      <h4><span className=\"SidebarChannel_hash\">#</span>{channelName}</h4>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SidebarChannel\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: { user: null },\r\n  reducers: {\r\n    login: (state, action) => { state.user = action.payload; },\r\n    logout: (state) => { state.user = null; }\r\n  },\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = state => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from 'firebase';\r\nconst { REACT_APP_apiKey, REACT_APP_authDomain, REACT_APP_projectId, REACT_APP_storageBucket, REACT_APP_messagingSenderId, REACT_APP_appId, REACT_APP_measurementId } = process.env\r\n\r\nconst firebaseConfig = {\r\n  apiKey: REACT_APP_apiKey,\r\n  authDomain: REACT_APP_authDomain,\r\n  projectId: REACT_APP_projectId,\r\n  storageBucket: REACT_APP_storageBucket,\r\n  messagingSenderId: REACT_APP_messagingSenderId,\r\n  appId: REACT_APP_appId,\r\n  measurementId: REACT_APP_measurementId\r\n}; \r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;","import React, { useState, useEffect } from 'react'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\n// import SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\n// import InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\n// import CallIcon from '@material-ui/icons/Call';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport SidebarChannel from './SidebarChannel';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux'\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport './Sidebar.css'\r\nimport db, { auth } from './firebase';\r\nimport { setChannelInfo } from \"./features/appSlice\";\r\n\r\nfunction Sidebar() {\r\n  const user = useSelector(selectUser);\r\n  const [channels, setChannels] = useState([]); \r\n  const dispatch = useDispatch()\r\n  const [selectedChannel, setSelectedChannel] = useState(0)\r\n\r\n  useEffect(() => {\r\n    db.collection('channels') // Collection located at Cloud Firestore, Collection is like the namespace\r\n      .onSnapshot(collectionSnapshot => { // onSnapshot is a listener that once there is a chance inside the namespace this fn will run\r\n        const firstChannel = collectionSnapshot.docs[0]\r\n        if (firstChannel) dispatch(setChannelInfo({channelId: firstChannel.id, channelName: firstChannel.data().channelName}))\r\n        setChannels(collectionSnapshot.docs.map(doc => ({ id: doc.id, channel: doc.data() })))\r\n      })\r\n  }, [dispatch])\r\n\r\n  const addChannel = () => {\r\n    const channelName = prompt('Enter a new channel name');\r\n    if (channelName) {\r\n      db.collection('channels').add({ channelName: channelName })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Sidebar\">\r\n      <div className=\"Sidebar_top\">\r\n        <h3>General</h3>\r\n        <ExpandMoreIcon />\r\n      </div>\r\n\r\n      <div className=\"Sidebar_channels\">\r\n        <div className=\"Sidebar_channelsHeader\">\r\n          <div className=\"Sidebar_header\">\r\n            <ExpandMoreIcon />\r\n            <h4>Text Channels</h4>\r\n          </div>\r\n\r\n          <AddIcon onClick={addChannel}className=\"Sidebar_addChannel\" />\r\n        </div>\r\n        <div className=\"Sidebar_channelsList\">\r\n          {channels.map(({ id, channel }, idx) => <SidebarChannel \r\n            key={id} \r\n            id={id} \r\n            channelName={channel.channelName}\r\n            isSelectedChannel={idx === selectedChannel}\r\n            selectChannel={() => setSelectedChannel(idx)} \r\n          />)}\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"Sidebar_voice\">\r\n        <SignalCellularAltIcon \r\n          className=\"Sidebar_voiceIcon\"\r\n          fontSize=\"large\"\r\n        />\r\n        <div className=\"Sidebar_voiceInfo\">\r\n          <h3>Voice Connected</h3>\r\n          <p>Stream</p>\r\n        </div>\r\n\r\n        <div className=\"Sidebar_voiceIcons\">\r\n          <InfoOutlinedIcon />\r\n          <CallIcon />\r\n        </div>\r\n      </div> */}\r\n      <div className=\"Sidebar_profile\">\r\n        <div className=\"Sidebar_profileInfo\">\r\n          <Avatar /*onClick={() => auth.signOut()}*/ src={user.photo} />\r\n          <div className='Sidebar_profileDescription'>\r\n            <h3>{user.displayName}</h3>\r\n            <h3 id='profile_id'>#{user.uid.substring(0, 5)}</h3>\r\n          </div>\r\n        </div>\r\n        <div className=\"Sidebar_profileIcons\">\r\n          <MicIcon />\r\n          <HeadsetIcon />\r\n          <SettingsIcon />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMoreIcon';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationRoundedIcon from '@material-ui/icons/EditLocationRounded';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\nimport './ChatHeader.css'\r\n\r\nfunction ChatHeader({ channelName }) {\r\n  return (\r\n    <div className=\"ChatHeader\">\r\n      <div className=\"ChatHeader_left\">\r\n        <h3>\r\n          <span className=\"ChatHeader_hash\">#</span>\r\n          {channelName}\r\n        </h3>\r\n      </div>\r\n      <div className=\"ChatHeader_right\">\r\n        <NotificationsIcon />\r\n        <EditLocationRoundedIcon />\r\n        <PeopleAltRoundedIcon />\r\n\r\n      <div className=\"ChatHeader_search\">\r\n        <input placeholder=\"Search\" />\r\n        <SearchRoundedIcon />\r\n      </div>\r\n\r\n      <SendRoundedIcon />\r\n      <HelpRoundedIcon />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatHeader\r\n","import { Avatar } from '@material-ui/core'\r\nimport isUrl from 'is-url'\r\nimport React from 'react'\r\nimport './Message.css'\r\n\r\nfunction Message({ timestamp, user, message }) {\r\n  const messageIsURL = isUrl(message);\r\n\r\n  return (\r\n    <div className=\"Message\">\r\n      <Avatar src={user.photo}/>\r\n      <div className=\"Message_info\">\r\n        <h4>{user.displayName}</h4>\r\n        <span className=\"Message_timestamp\">\r\n          {new Date(timestamp?.toDate()).toUTCString().split(\" \").slice(0, 4).join(\" \")}\r\n        </span>\r\n        <p>\r\n          {messageIsURL ? <img src={message} alt={message} /> : message}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Message\r\n","import {\r\n  usePopupState,\r\n  bindTrigger,\r\n  bindMenu,\r\n} from 'material-ui-popup-state/hooks'\r\nimport { Menu } from \"@material-ui/core\";\r\nimport { Picker } from \"emoji-mart\";\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\nimport './EmojiPopUp.css'\r\n\r\nconst EmojiPopUp = ({ input, addEmojiToInput }) => {\r\n  const popupState = usePopupState({ variant: 'popover', popupId: 'demoMenu' })\r\n\r\n  const onEmojiSelect = (evt) => {\r\n    const emoji = evt.native;\r\n    addEmojiToInput(emoji)\r\n    popupState.close(evt)\r\n  }\r\n\r\n  return (\r\n    <div className='EmojiPopUp'>\r\n      <EmojiEmotionsIcon fontSize=\"large\"  {...bindTrigger(popupState)} />\r\n      <Menu\r\n        {...bindMenu(popupState)}\r\n        getContentAnchorEl={null}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right', }}\r\n        transformOrigin={{ vertical: 'bottom', horizontal: 'right', }}\r\n      >\r\n        <Picker style={{ background: '#2f3136', borderColor: \"#202225\" }}\r\n        set='twitter' \r\n        onSelect={onEmojiSelect}\r\n        theme=\"dark\"\r\n        />\r\n      </Menu>\r\n    </div>\r\n  )\r\n} \r\n\r\nexport default EmojiPopUp;","import {\r\n  usePopupState,\r\n  bindTrigger,\r\n  bindMenu,\r\n} from 'material-ui-popup-state/hooks'\r\nimport { Menu } from \"@material-ui/core\";\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\r\nimport ReactGiphySearchbox from \"react-giphy-searchbox\";\r\nimport \"emoji-mart/css/emoji-mart.css\";\r\nimport './GIFPopUp.css'\r\n\r\nconst GIFPopUp = ({ sendEmoji }) => {\r\n  const popupState = usePopupState({ variant: 'popover', popupId: 'demoMenu' })\r\n  const onGIFSelect = (EmojiLink) => {\r\n    sendEmoji(EmojiLink);\r\n    popupState.close()\r\n  }\r\n\r\n  return (\r\n    <div className='GIFPopUp'>\r\n      <CardGiftcardIcon fontSize=\"large\"  {...bindTrigger(popupState)} />\r\n      <Menu\r\n        {...bindMenu(popupState)}\r\n        getContentAnchorEl={null}\r\n        anchorOrigin={{ vertical: 'top', horizontal: 'right', }}\r\n        transformOrigin={{ vertical: 'bottom', horizontal: 'right', }}\r\n      >\r\n      <div className=\"searchboxWrapper\">\r\n        <ReactGiphySearchbox\r\n          apiKey=\"9Ixlv3DWC1biJRI57RanyL7RTbfzz0o7\"\r\n          onSelect={(item) => onGIFSelect(item.images.original.url)}\r\n          masonryConfig={[\r\n            { columns: 2, imageWidth: 110, gutter: 5 },\r\n            { mq: \"700px\", columns: 3, imageWidth: 120, gutter: 5 }\r\n          ]}\r\n        />\r\n      </div>\r\n      </Menu>\r\n    </div>\r\n  )\r\n} \r\n\r\nexport default GIFPopUp;","import React, { useState, useRef, useEffect } from \"react\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport \"./Chat.css\";\r\nimport Message from \"./Message\";\r\nimport { selectChannelId, selectChannelName } from \"./features/appSlice\";\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport db from \"./firebase\";\r\nimport firebase from 'firebase';\r\nimport EmojiPopUp from \"./EmojiPopUp\";\r\nimport GIFPopUp from \"./GIFPopUp\";\r\n\r\nfunction Chat() {\r\n  const user = useSelector(selectUser);\r\n  const channelId = useSelector(selectChannelId);\r\n  const channelName = useSelector(selectChannelName);\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const messagesEndRef = useRef(null);\r\n  \r\n\r\n  useEffect(() => {\r\n    if (channelId) {\r\n      db.collection('channels')\r\n        .doc(channelId).collection('messages')\r\n        .orderBy('timestamp', \"desc\")\r\n        .onSnapshot(snapshot => setMessages(snapshot.docs.map(doc => doc.data())))\r\n    }\r\n  }, [channelId])\r\n\r\n  const sendMessage = (evt) => {\r\n    if (evt) evt.preventDefault();\r\n    db.collection('channels').doc(channelId).collection('messages').add({ timestamp: firebase.firestore.FieldValue.serverTimestamp(), message: input, user})\r\n    setInput(\"\");\r\n  }\r\n\r\n  const sendEmoji = (emojiLink) => {\r\n    db.collection('channels').doc(channelId).collection('messages').add({ timestamp: firebase.firestore.FieldValue.serverTimestamp(), message: emojiLink, user})\r\n    setInput(\"\");\r\n  }\r\n\r\n  const scrollToBottom = () => messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n\r\n  useEffect(scrollToBottom, [messages]);\r\n\r\n  return <div className=\"Chat\">\r\n    <ChatHeader channelName={channelName} />\r\n\r\n    <div className=\"Chat_messages\">\r\n      {messages.slice().reverse().map(({timestamp, message, user}) => <Message \r\n        key={timestamp + message + user}\r\n        user={user}\r\n        message={message}\r\n        timestamp={timestamp}\r\n      />)}\r\n      <div ref={messagesEndRef} />\r\n    </div>\r\n\r\n    <div className=\"Chat_input\">\r\n      <AddCircleIcon fontSize=\"large\" />\r\n      <form>\r\n        <input placeholder={`Message #${channelName}`} disabled={!channelId} value={input} onChange={(e) => setInput(e.target.value)} />\r\n        <button className=\"Chat_inputButton\" type=\"submit\" onClick={sendMessage} >\r\n          Send Message\r\n        </button>\r\n      </form>\r\n\r\n      <div className=\"Chat_inputIcons\">\r\n        <GIFPopUp sendEmoji={sendEmoji} />\r\n        <EmojiPopUp addEmojiToInput={(EmojiToAdd) => setInput(input + EmojiToAdd)} />\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n}\r\n\r\nexport default Chat;\r\n","import { Button } from '@material-ui/core'\r\nimport { auth, provider } from './firebase';\r\nimport asd from './discord_logo.png'\r\n// import zxc from './discord-clone.png'\r\nimport React from 'react'\r\nimport \"./Login.css\"\r\n\r\nfunction Login() {\r\n  const signIn = () => {\r\n    auth.signInWithPopup(provider).catch(err => alert(err.message))\r\n  }\r\n\r\n  return (\r\n    <div className=\"Login\">\r\n      <div className=\"Login_logo\">\r\n        <img src={asd} width=\"600\" alt=\"Logo\" />\r\n      </div>\r\n\r\n      <Button onClick={signIn}>Sign In</Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Sidebar from './Sidebar';\r\nimport Chat from './Chat';\r\nimport './App.css';\r\nimport { selectUser } from './features/userSlice';\r\nimport Login from './Login';\r\nimport { auth } from './firebase';\r\nimport { login, logout } from './features/userSlice';\r\nimport faker from 'faker';\r\nimport axios from 'axios';\r\n\r\nconst IMAGE_API_URL = \"https://source.unsplash.com/random\"\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser)\r\n\r\n  // useEffect(() => {\r\n  //   auth.onAuthStateChanged((authUser) => {\r\n  //     if (authUser) {\r\n  //       dispatch(login({ \r\n  //         uid: authUser.uid, \r\n  //         photo: authUser.photoURL, \r\n  //         email: authUser.email,\r\n  //         displayName: authUser.displayName\r\n  //       }))\r\n  //     } else {\r\n  //       dispatch(logout())\r\n  //     }\r\n  //   })\r\n  // }, [dispatch])\r\n  \r\n  // if (!user)\r\n  //   return <Login />\r\n  \r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const randomImage = (await axios.get(IMAGE_API_URL)).request.responseURL\r\n      console.log(randomImage)\r\n      auth.signInAnonymously().then(guest => { \r\n        dispatch(login({\r\n          uid: guest.user.uid,\r\n          photo: randomImage,\r\n          email: faker.internet.email(),\r\n          displayName: faker.name.firstName() \r\n        }))\r\n      }).catch(error => alert(error.message))\r\n    })()\r\n  }, [dispatch])\r\n\r\n  if (!user)\r\n    return <div style={{ background: '#36393f', height: '100vh'}} />\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Sidebar />\r\n      <Chat />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}